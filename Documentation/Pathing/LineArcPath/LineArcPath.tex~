\documentclass{article}
\usepackage{Macros}

\newcommand{\class}[1]{\section{class \texttt{#1}}}
\newcommand{\attribute}[1]{\subsection{\texttt{self.#1}}}
\newcommand{\method}[1]{\subsection{\texttt{self.#1}}}
\newcommand{\function}[1]{\section{\texttt{#1}}}
\newcommand{\argumenta}[1]{\subsection{\texttt{#1}}}
\newcommand{\argumentb}[1]{\subsubsection{\texttt{#1}}}


\begin{document}
\begin{flushleft}

\begin{center}
  Cowbot Documentation: Pathing.LineArcLine.py
\end{center}

TODO: Clean up \texttt{\_\_init()\_\_} so it's not as much a wall of code.


\class{ArcLineArc}
      {

        \argumenta{start}
                  {
                    \texttt{Vec3}.  The starting point for the path.
                  }
        \argumenta{end}
                  {
                    \texttt{Vec3}.  The ending point for the path.                    
                  }
        \argumenta{start\_tangent}
                  {
                    Nonzero \texttt{Vec3}.  The tangent to the path at \texttt{start}.
                  }
        \argumenta{transition1}
                  {
                    \texttt{Vec3}.  The location of the transition from the first line segment to the arc.
                  }
        \argumenta{radius}
                  {
                    Float.  The signed radius of the arc.  Positive for CW, negative for CCW.
                  }
        \argumenta{current\_state}
                  { TODO: Add this argument or \texttt{follow\_path} won't work.
                    \texttt{CarState}.  The current state of our car, probably from \texttt{game\_info.me}.
                  }


        \attribute{center}
                  {
                    \texttt{Vec3}. The location of the center of the circle containing the arc.
                  }
        \attribute{end\_tangent}
                  {
                    \texttt{Vec3}.  The tangent vector to the path at \texttt{end}.
                  }
        \attribute{transition1}
                  {
                    \texttt{Vec3}. The location of the transition from the arc to the second line segment.
                  }
        \attribute{is\_valid}
                  {
                   Boolean.  True when the LineArcLine is valid, using conditions added as seen fit.  TODO: Add checks that we don't leave the floor of the stadium.
                  }

        \method{find\_lengths()}
               {
                 Returns three floats: The length of the first line segment, the length of the arc, and the length of the second line segment.
               }
        \method{draw\_path()}
               {
                 Uses the RLBot renderer to draw the LineArcLine path on screen.  Disable for tournament versions.
               }
        \method{check\_validity()}
               {
                 Returns a boolean, True when the LineArcLine is valid.  Currently always returns True.  TODO: implement actual checks.
               }
               



















      }
      
         









  
  





\end{flushleft}
\end{document}
